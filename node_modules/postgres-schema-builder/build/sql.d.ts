import { Columns, Column, IQuery, ISQLArg } from "./table";
export declare namespace SQL {
    export const createDatabase: (name: string) => string;
    export const createTable: (name: string, columns: Columns) => string;
    export const addColumns: (tableName: string, columns: Columns) => string;
    type DropColumns = {
        (tableName: string, columns: Columns): string;
        (tableName: string, columns: string[], constraints?: string[]): string;
    };
    export const dropColumns: DropColumns;
    export const insert: (tableName: string, subset: string[]) => string;
    export const update: (tableName: string, subset: string[], where: string[]) => string;
    export const selectAll: (tableName: string, subset: string[] | "*") => string;
    type Select = {
        (tableName: string, subset: string[] | "*", where: string[]): string;
        (tableName: string, subset: string[] | "*", where: ISQLArg[]): string;
    };
    export const select: Select;
    export const deleteEntry: (tableName: string, where: string[]) => string;
    export const dropTable: (tableName: string, dropConstraints?: boolean | undefined) => string;
    export const dropTableColumn: (tableName: string, column: string, cascade?: boolean | undefined) => string;
    export const addTableColumn: (tableName: string, column: {
        name: string;
    } & Column, ifNotExists?: boolean) => string;
    export const dropConstraint: (tableName: string, col: string, info: Column) => string;
    export const createIndex: (unique: boolean, name: string, column: string) => string;
    export const raw: <T extends {}>(sql: string, values?: unknown[]) => IQuery<T>;
    export const dropView: (view: string) => string;
    export const createView: (view: string, query: string) => string;
    export {};
}
