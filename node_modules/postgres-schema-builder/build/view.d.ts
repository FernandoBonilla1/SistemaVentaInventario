import { ITable, Columns } from "./table";
export interface IView<C extends Columns> extends Pick<ITable<C>, "name" | "create" | "selectAll" | "select" | "drop"> {
    readonly sql: string;
    readonly dependencies: string[];
}
interface ViewArgs<Tbls extends {
    [key: string]: Columns;
}, Tbl extends Extract<keyof Tbls, string>> {
    views: Tbls;
    view: Tbl;
    query: string;
    dependencies: string[];
}
export declare const View: <Tbls extends {
    [key: string]: Columns;
}, Tbl extends Extract<keyof Tbls, string>>({ view, views, query, dependencies, }: ViewArgs<Tbls, Tbl>) => IView<Tbls[Tbl]>;
export {};
