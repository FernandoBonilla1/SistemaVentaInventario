import { IDatabaseClient, IDatabaseBaseClient } from "./database-client";
import { IQuery, Columns } from "./table";
import { IView } from "./view";
export declare type IDatabaseSchema = ReturnType<typeof DatabaseSchema>;
export interface IUpDownArgs {
    transaction: IDatabaseBaseClient;
    database: IDatabaseBaseClient;
}
export interface IMigration {
    up: (args: IUpDownArgs) => Promise<void | IQuery<{}>[]>;
    views: IView<any>[];
}
export declare const Migration: (up: (args: IUpDownArgs) => Promise<void | IQuery<{}>[]>, views?: IView<any>[]) => IMigration;
export declare type CreateStatement = string;
export interface IDatabaseSchemaArgs {
    name: string;
    client: IDatabaseClient;
    createStatements: CreateStatement[];
    views: IView<any>[];
    migrations: Map<number, IMigration>;
    logMigrations?: boolean;
}
export declare const DatabaseSchema: ({ client, createStatements, views, name, migrations, logMigrations, }: IDatabaseSchemaArgs) => {
    name: string;
    getVersion: () => number;
    init: () => Promise<void>;
    migrateLatest: () => Promise<void>;
    migrateToVersion: (targetVersion: number) => Promise<void>;
};
declare type ITables = {
    [name: string]: Columns;
};
export declare const SchemaDiff: <OldTables extends ITables, Tables extends ITables>(oldTables: OldTables, tables: Tables) => {
    dropTable: (table: Exclude<Extract<keyof OldTables, string>, Extract<keyof Tables, string>>) => string;
    createTable: (table: Exclude<Extract<keyof Tables, string>, Extract<keyof OldTables, string>>) => string;
    replaceTables: (replace: Extract<Extract<keyof Tables, string>, Extract<keyof OldTables, string>>[]) => string[];
    dropTableColumn: <Name extends Extract<Extract<keyof Tables, string>, Extract<keyof OldTables, string>>>(table: Name, column: Extract<Exclude<keyof OldTables[Name], keyof Tables[Name]>, string>) => string;
    addTableColumn: <Name_1 extends Extract<Extract<keyof Tables, string>, Extract<keyof OldTables, string>>>(table: Name_1, column: Extract<Exclude<keyof Tables[Name_1], keyof OldTables[Name_1]>, string>) => string;
    replaceTableColumn: <Name_2 extends Extract<Extract<keyof Tables, string>, Extract<keyof OldTables, string>>>(table: Name_2, column: Extract<Extract<keyof Tables[Name_2], keyof OldTables[Name_2]>, string>) => string[];
    addRequiredColumn: <Name_3 extends Extract<Extract<keyof Tables, string>, Extract<keyof OldTables, string>>>(table: Name_3, column: Extract<Exclude<keyof Tables[Name_3], keyof OldTables[Name_3]>, string>, updates: string[]) => string;
    replaceRequiredColumn: <Name_4 extends Extract<Extract<keyof Tables, string>, Extract<keyof OldTables, string>>>(table: Name_4, column: Extract<Extract<keyof Tables[Name_4], keyof OldTables[Name_4]>, string>) => (string | IQuery<{}>)[];
    addIndex: <Name_5 extends Extract<Extract<keyof Tables, string>, Extract<keyof OldTables, string>>>(table: Name_5, column: keyof Tables[Name_5] & string, unique: boolean) => string;
};
export {};
