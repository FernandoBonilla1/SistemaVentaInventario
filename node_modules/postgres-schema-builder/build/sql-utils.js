"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortViewDependencies = exports.sortTableDependencies = exports.composeCreateTableStatements = exports.dateToSQLUTCFormat = void 0;
const topological_sort_1 = require("./topological-sort");
const sql_1 = require("./sql");
function dateToSQLUTCFormat(date) {
    return (date.getUTCFullYear() +
        "-" +
        twoDigits(1 + date.getUTCMonth()) +
        "-" +
        twoDigits(date.getUTCDate()) +
        " " +
        twoDigits(date.getUTCHours()) +
        ":" +
        twoDigits(date.getUTCMinutes()) +
        ":" +
        twoDigits(date.getUTCSeconds()) +
        "." +
        date.getUTCMilliseconds());
}
exports.dateToSQLUTCFormat = dateToSQLUTCFormat;
const twoDigits = (d) => {
    if (0 <= d && d < 10)
        return "0" + d.toString();
    if (-10 < d && d < 0)
        return "-0" + (-1 * d).toString();
    return d.toString();
};
const composeCreateTableStatements = (tables) => exports.sortTableDependencies(tables).map(([name, columns]) => sql_1.SQL.createTable(name, columns));
exports.composeCreateTableStatements = composeCreateTableStatements;
const sortTableDependencies = (tables) => {
    const tablesSorted = topological_sort_1.topologicalSort(Object.entries(tables), ([name]) => name, function* columns([table, columns]) {
        for (const value of Object.values(columns)) {
            if (value.foreignKeys) {
                for (const foreignKey of value.foreignKeys) {
                    if (foreignKey.targetTable !== table) {
                        yield foreignKey.targetTable;
                    }
                }
            }
        }
    });
    if (!tablesSorted) {
        throw new Error(`Cannot sort tables due to circular dependencies!`);
    }
    return tablesSorted;
};
exports.sortTableDependencies = sortTableDependencies;
const sortViewDependencies = (views) => {
    const sorted = topological_sort_1.topologicalSort(views, (view) => view.name, (view) => view.dependencies);
    if (sorted === null) {
        throw new Error("Views reference themselves in a circular manner");
    }
    return sorted;
};
exports.sortViewDependencies = sortViewDependencies;
//# sourceMappingURL=sql-utils.js.map