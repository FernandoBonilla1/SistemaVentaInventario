import { Pool, PoolConfig } from "pg";
import { Columns, IQuery, TableRecord } from "./table";
declare type QueryRows<T> = TableRecord<Extract<T, Columns>>[];
export declare class SQLError extends Error {
    constructor(err: Error, sql: string, values?: unknown[]);
}
export interface IDatabaseBaseClient {
    query<T extends Columns>(query: IQuery<T>): Promise<QueryRows<T>>;
}
export interface IDatabaseClient extends IDatabaseBaseClient {
    batch(queries: IQuery<{}>[]): Promise<void>;
    transaction: <T>(task: (client: IDatabaseBaseClient) => Promise<T>) => Promise<T>;
    close(): Promise<void>;
}
export declare const DatabaseClient: (client: Pool) => IDatabaseClient;
export declare const postgresConfigFromEnv: () => PoolConfig;
export {};
