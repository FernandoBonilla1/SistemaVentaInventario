"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.postgresConfigFromEnv = exports.DatabaseClient = exports.SQLError = void 0;
const pg_1 = require("pg");
class SQLError extends Error {
    constructor(err, sql, values) {
        super(`SQLError: ${err} SQL: ${sql} Values: ${values}`);
    }
}
exports.SQLError = SQLError;
const DatabaseClient = (client) => {
    const query = (query) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const dbResult = yield client.query(query.sql, query.values);
            return dbResult.rows;
        }
        catch (err) {
            throw new SQLError(err, query.sql, query.values);
        }
    });
    const batch = (queries) => __awaiter(void 0, void 0, void 0, function* () {
        yield transaction((database) => __awaiter(void 0, void 0, void 0, function* () {
            queries.forEach(database.query);
        }));
    });
    const transaction = (task) => __awaiter(void 0, void 0, void 0, function* () {
        const localClient = yield client.connect();
        let failedSQL = "";
        try {
            yield localClient.query("BEGIN");
            const result = yield task({
                query: (query) => {
                    failedSQL = query.sql;
                    return localClient.query(query.sql, query.values).then((result) => result.rows);
                },
            });
            yield localClient.query("COMMIT");
            return result;
        }
        catch (err) {
            yield localClient.query("ROLLBACK");
            console.debug(failedSQL);
            throw err;
        }
        finally {
            yield localClient.release();
        }
    });
    const close = () => {
        return client.end();
    };
    const IOD_DATE = 1082;
    pg_1.types.setTypeParser(IOD_DATE, (date) => date);
    return { query, batch, close, transaction };
};
exports.DatabaseClient = DatabaseClient;
const postgresConfigFromEnv = () => {
    const config = {
        host: process.env.POSTGRES_HOST || "localhost",
        port: process.env.POSTGRES_PORT ? parseInt(process.env.POSTGRES_PORT) : undefined,
        user: process.env.POSTGRES_USER || "postgres",
    };
    if (process.env.POSTGRES_DATABASE) {
        config.database = process.env.POSTGRES_DATABASE;
    }
    if (process.env.POSTGRES_PASSWORD) {
        config.password = process.env.POSTGRES_PASSWORD;
    }
    return config;
};
exports.postgresConfigFromEnv = postgresConfigFromEnv;
//# sourceMappingURL=database-client.js.map