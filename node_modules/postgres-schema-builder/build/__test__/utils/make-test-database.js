"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeMockDatabase = exports.makeTestDatabase = void 0;
const database_client_1 = require("../../database-client");
const pg_1 = require("pg");
const uuid_1 = require("uuid");
const makeTestDatabase = () => __awaiter(void 0, void 0, void 0, function* () {
    const clientConfigWithoutDatabase = database_client_1.postgresConfigFromEnv();
    clientConfigWithoutDatabase.database = undefined;
    const clientWithoutDatabase = new pg_1.Pool(clientConfigWithoutDatabase);
    const testDatabaseName = "test_" + uuid_1.v4().split("-").join("");
    yield clientWithoutDatabase.query({ text: `CREATE DATABASE ${testDatabaseName};` });
    const database = database_client_1.DatabaseClient(new pg_1.Pool(Object.assign(Object.assign({}, clientConfigWithoutDatabase), { database: testDatabaseName })));
    const cleanupHook = () => __awaiter(void 0, void 0, void 0, function* () {
        yield database.close();
        yield clientWithoutDatabase.query({ text: `DROP DATABASE ${testDatabaseName};` });
        yield clientWithoutDatabase.end();
    });
    return { database, cleanupHook, clientConfig: clientConfigWithoutDatabase, testDatabaseName };
});
exports.makeTestDatabase = makeTestDatabase;
const makeMockDatabase = () => ({
    query: jest.fn(),
    batch: jest.fn(),
    close: jest.fn(),
    transaction: jest.fn(),
});
exports.makeMockDatabase = makeMockDatabase;
//# sourceMappingURL=make-test-database.js.map